@use 'sass:math';
@use '../settings' as *;

// Basics ///////////////////////////////////

figure {
  margin-left: 0;
  margin-right: 0;
}

//////////////////////////////////////////////////

@mixin side-by-side-figures($column-gap: 0, $rows: 2) {

  // A little utility to place two figures side by side in a grid, and have a (manual) caption spread underneath.
  // If we have more than to opictures (e.g. two rows of two pictures and one row of caption), increase $rows to add more explicit rows so the explicit placement of the caption works.

  display: grid;
  grid-template-columns: 1fr 1fr;
  column-gap: $column-gap;
  grid-template-rows: repeat($rows, min-content);

  // Override default img behavior in the golden grid:

  img {
    grid-column: auto;
  }

  p.caption {
    grid-column: 1/3;
    grid-row: -2/-1;
    margin-top: .2rem;
    margin-bottom: 1rem;
  }
}

//////////////////////////////////////////////////

header {
  margin-bottom: 3rem;
}

// Attribution lines in blockquotes should be flushed right

.attribution {
  text-align: right;
}

// Remove side margins for blockquote, and add a border.

blockquote {
  margin-left: 0;
  margin-right: 0;
}

blockquote:not(.highlights) {
  border-left: .4rem solid $primary-color;
  margin-left: -1rem;
  padding-left: 1rem;
}


// Objects, videos need to be constrained to their parent.

object, video {
  max-width: 100%;
}

svg {
  // TODO: avoid cropping; https://css-tricks.com/scale-svg/
}

// Footnotes

.footnote {
  display: grid;
  grid-template-columns: min-content 1fr;
  grid-column-gap: .5rem;

  .label {
    grid-column: 1/2;
  }

  > p {
    grid-column: 2/3;
  }
}


// Experiments with the golden ratio as basis for all layouts ///////////////////////////////////

%golden-grid-skeleton {
  // Basic golden grid with only template definitions, no placement
  display: grid;
  grid-template-columns:

  // The left margin (larger) is in a golden relationship with the right margin (smaller). When added to the main-content, they're in a golden relationship with the smaller [side-content + right-margin] area, which enables us to have a full-width golden row as well.
  [full-start full-golden-large-start left-margin-start] repeat(2, minmax(1rem, #{math.div($golden1, 2)}fr))

  // The main content is limited by its max width, and we split that zone into 4 equal columns for flexibility:
  [left-margin-end full-content-start main-content-start] repeat(4, minmax(min-content, math.div($main-content-max-width, 4)))

  // We don't have a column-gap in order to stay as close as possible to the golden proportions. We add a gutter here to separate the two content sections a bit, but we split it into two smaller gutters that are themselves in a golden relationship, so we can split the width exactly with full-golden-large and full-golden-small:
  [main-content-end] calc(#{$golden1 * 1.2rem} + #{$golden1 * 2vw}) // slightly larger than $base-unit

  [full-golden-large-end full-golden-small-start ] calc(#{$golden2 * 1.2rem} + #{$golden2 * 2vw}) // slightly larger than $base-unit

  // The side content is defined by its golden relationship to the main content, and we split that zone into 3 equal columns for flexibility:
  [side-content-start] repeat(3, minmax(min-content, math.div($golden1 * $main-content-max-width, 3)))

  // The right margin (smaller) is in a golden relationship with the left margin (larger). When added to the side-content, they're in a golden relationship with the larger [left-margin + main content] area.
  [side-content-end full-content-end right-margin-start] repeat(2, minmax(1rem, #{math.div($golden2, 2)}fr))

  [right-margin-end full-golden-small-end full-end];

  // no margins for the skeleton
  > * {
    grid-column: full;
  }
}

%golden-grid {
  // golden grid with usual page/post content
  @extend %golden-grid-skeleton;

  // On small viewports, everything is stacked vertically, with the side margins:
  > * {
    grid-column: full-content;
  }

  // Except sections and other containers that need the full width because they use the same golden grid:
  > section,
  .entry-content,
  //or just look silly if not centered:
  hr {
    grid-column: full;
  }

  // On small viewports, images in figures are stretched to the full viewport, but for that we need to flatten them so we can align its child elements on the grid. The figcaption keeps its margins though.

  figure,
  .figures,
  picture {
    display: contents;
  }

  img {
    grid-column: full;
  }

  figcaption,
  .caption {
    grid-column: full-content;
  }

  // On larger viewports, we switch to our golden grid:

  @media screen and (min-width: $breakpoint-medium) {
    h2,
    h3,
    p,
    blockquote,
    ul,
    ol,
    video,
    // Let's put figures in the main-content unless explicitly in a sidebar. We keep <figure> and .figures elements flattened so we can arrange images and captions Ã  la Tufte:
    img,
    // but sometimes we have special .figures that we still want to be in the main-content:
    .figures,
    //.expert content tends to be wordy and among figures so let's keep it in the main-content zone by default:
    .expert,
    // Override class to place elements that are traditionally in side-content in the main-content. We put it inside the golden-grid definition for specificity reasons.
    // (We don't need the reverse class because we can use the sidebar directive for that.)
    .main-content {
      grid-column: main-content;
    }

    // Unless we have a full-content element:
    .full-content {
      img {
        grid-column: full-content;
      }

      // When the image takes up the full-content width, let's put the caption in the side-content. We span two rows to avoid shifting content down in the main-content area. And we align the caption at the start so it's right underneath the image.
      figcaption {
        grid-row: span 2;
        align-self: start;

      }
    }

    // Place side elements in the sidebar:
    .footnote,
    .sidebar,
    figcaption,
    .caption,
    .admonition {
      grid-column: side-content;
    }

    // Have the option to unset those styles if they're giving us trouble
    .unset-grid {
      grid-column: unset;
    }

    // Align <figcaption>, .caption, and .footnote elements at the start for a Tufter look:
    figcaption,
    .caption,
    .footnote,
    .admonition {
      align-self: end;
    }

    // Align other elements in the sidebar vertically for a more dynamic / organic flow:
    .sidebar {
      align-self: center;

      // Unless we specifically don't want to
      &.align-start {
        align-self: start;
      }

      &.align-end {
        align-self: end;
      }
    }
  }
}

// Create classes for indicating on which row images should start in the golden grid

@for $i from 1 through 10 {
  .rowstart-#{$i} {
    @media screen and (min-width: $breakpoint-medium) {
      grid-row-start: #{$i};
    }
  }
}

// Create classes for spanning images across several rows in the golden grid

@for $i from 1 through 10 {
  .rowspan-#{$i} {
    @media screen and (min-width: $breakpoint-medium) {
      grid-row-end: span #{$i};
    }
  }
}

// Hero titles based on the golden grid

%golden-section {
  @extend %golden-grid;

  // based on the split-layout hero titles


  h2 {
    grid-column: full;
    // Use both halves because on narrower viewports we don't have space to add the first paragraph of text in here:
    grid-row: 2/4;
    align-self: center;
    // Make sure this element shows above the image:
    z-index: 10;
    // add margins because we're using the full width of the viewport
    margin-left: 1rem;
    margin-right: 1rem;
  }

  > figure:first-of-type {
    // This is the first picture in the section, i.e. the one we want to use as graphic spread.

    img {
      grid-column: full;
      grid-row: 1/5;
      z-index: 2;
      height: 100%;
      object-fit: cover;
    }

    figcaption {
      grid-column: full;
      grid-row: 3/4;
      // add margins:
      margin-left: .5rem;
      margin-right: .5rem;
    }
  }

  // box-shadows to simulate depth
  &::before {
    content: '';
    grid-row: 1/3;
    grid-column: full;
    box-shadow: 0 0 2rem 0 #44000077;
    z-index: 4;
  }

  @media screen and (min-width: $breakpoint-medium) {

    h2 {
      // We're still using the full width, but we need to say so explicitly because the golden grid puts this into the main-content area by default on wider viewscreens:
      grid-column: full;
      // For the rows, though, we now have space to pull in the first paragraph of text, so we limit the title to the top half of the hero spread:
      grid-row: 2/3;
      // and we align it at the bottom of the top half, for aesthetics:
      align-self: end;
    }

    > figure:first-of-type figcaption {
    justify-self: end;
      // Since we have more space, we align this flushed right, but no longer than beyond the golden divide:
      // TODO: uncomment that once we find a way to reserve the full-golden-large part of this rnow so text paragraphs don't go in there
      //grid-column: full-golden-small;
      // And we can get rid of the left-margin
      //margin-left: 0;
    }
  }
}

%golden-section-hero-full {
  @extend %golden-section;

  grid-template-rows:
  35vh                 // top half
  35vh                 // bottom half
  min-content          // figcaption
  auto;                // remaining content of the section

  h2 {
    grid-column: full;
    // Use both halves because on narrower viewports we don't have space to add the first paragraph of text in here:
    grid-row: 1/3;
    align-self: center;
    // Make sure this element shows above the image:
    z-index: 10;
    // Use a light color for a dark background:
    color: #f3f3f3;
    // add margins because we're using the full width of the viewport
    margin-left: 1rem;
    margin-right: 1rem;
    text-shadow: 0 0 1.5rem #000,-.5rem 0 1.5rem #000,0.5rem 0 1.5rem #000;
  }

  > figure:first-of-type {
    // This is the first picture in the section, i.e. the one we want to use as graphic spread.

    img {
      grid-column: full;
      grid-row: 1/3;
      z-index: 2;
      height: 100%;
      object-fit: cover;
      // Since we have a dark background with bright text, make the background darker by reducing its brightness:
      filter: brightness(60%);
    }
  }

  @media screen and (min-width: $breakpoint-medium) {

    h2 {
      // We're still using the full width, but we need to say so explicitly because the golden grid puts this into the main-content area by default on wider viewscreens:
      grid-column: full;
      // For the rows, though, we now have space to pull in the first paragraph of text, so we limit the title to the top half of the hero spread:
      grid-row: 1/2;
      // and we align it at the bottom of the top half, for aesthetics:
      align-self: end;
    }

    > p:first-of-type {
      // Like the title, this needs to be full width:
      grid-column: full;
      // We place it in the bottom half of the hero spread:
      grid-row: 2/3;
      align-self: center;
      justify-self: center;
      z-index: 10;
      font-size: calc(1.5rem + .65vw); // replace with @include typography.larger-font-size(); but without loading all the font definitions
      color: #f3f3f3;
      text-shadow: 0 0 1.5rem #000,-.5rem 0 1.5rem #000,0.5rem 0 1.5rem #000;
      padding-left: $base-unit;
      padding-right: $base-unit;
      max-width: 80ch;
    }
  }
}

%golden-section-hero-golden {
  @extend %golden-section;

  grid-template-rows:
  // total height of the graphic spread is 85% of the viewport's height
  minmax(min-content, #{$golden1 * 85}vh)  // top half
  minmax(min-content, #{$golden2 * 85}vh)  // bottom half
  min-content                         // figcaption
  auto;                               // remaining content

  h2 {
    grid-column: full;
    // Use both halves because on narrower viewports we don't have space to add the first paragraph of text in here:
    grid-row: 2/3;
    align-self: center;
    // Make sure this element shows above the image:
    z-index: 10;
    // Use a light color for a dark background:
    display: block;

    // add margins because we're using the full width of the viewport
    margin-left: 1rem;
    margin-right: 1rem;
  }

  > figure:first-of-type img {
      grid-column: full;
      grid-row: 1/3;
      z-index: 2;
      height: 100%;
      object-fit: cover;
    }

  // background-color for the bottom area
  &::after {
    content: '';
    grid-column: full;
    grid-row: 2/3;
    background-color: #ecececde;
    z-index: 5;
  }

  @media screen and (min-width: $breakpoint-medium) {

    // On wider viewports we want to pull the first paragraph of text in, but it takes more space than the h2 title, so we need to reverse the golden relationship between the hero area's two zones:
    // We can also reduce the overall height a bit
    grid-template-rows:
    minmax(min-content, #{$golden2 * 70}vh)  // top half
    minmax(min-content, #{$golden1 * 70}vh)  // bottom half
    min-content                         // figcaption
    auto;

    // Left side:

    > figure:first-of-type img {
        grid-column: full-golden-large;
        grid-row: 1/3;
        z-index: 2;
        height: 100%;
        object-fit: cover;
      }

    // Right side:

    // background-color for the right side
    &::after {
      grid-row: 1/3;
      grid-column: full-golden-small;
    }

    h2 {
      // We're restricting the title and text to the right side:
      grid-column: full-golden-small;
      // For the rows, though, we now have space to pull in the first paragraph of text, so we limit the title to the top half of the hero spread:
      grid-row: 1/2;
      // Align it to the bottom of the top area, to emphasize the golden separation
      align-self: end;
      margin-bottom: 0;

      &::after {
        content: "";
        border-bottom: 1px solid $primary-color;
        display: block;
        //we want the width of this border to be in a golden relationship with the whitespace on either side of it
        width: #{$golden2 * 100%};
        margin-left: #{math.div($golden1, 2) * 100%};
      }
    }

    > p:first-of-type {
      // Like the title, this needs to be full width:
      grid-column: full-golden-small;
      // We place it in the bottom half of the hero spread:
      grid-row: 2/3;
      // Align it to the top of the bottom area, to emphasize the golden separation
      align-self: start;
      justify-self: center;
      z-index: 10;
      padding-left: $base-unit;
      padding-right: $base-unit;
      max-width: 80ch;
    }
  }
}

// Site-wide layouts ///////////////////////////////////////////////////////////

#masthead,
#article-header-default,
#article-header-hero,
{
  @extend %golden-grid-skeleton;
}

// article.page,
// article.postpage,
// #article-content-hero {
//   grid-column: full;
//   display: contents;
// }
//
// #article-content-default,
// #article-content-hero > div {
//     grid-column: full;
//     grid-row: 8/9
// }

#article-content-default,
section,
// On hero pages, the golden grid is at the level of sections, so we need to make .highlights a golder grid as well
#article-content-hero .highlights {
  @extend %golden-grid;
}

.hero-h2-golden.entry-content > div > section {
  @extend %golden-section-hero-golden;
}

footer nav {
  @extend %golden-grid;
}
