@use '../settings' as *;
@use 'sass:math';

// Basics ///////////////////////////////////

figure {
  margin-left: 0;
  margin-right: 0;
}





// Mixins ///////////////////////////////////

@mixin default($width: 65ch) {

  display: grid;
  grid-template-columns: minmax(.5rem, 1fr) minmax(min-content, $width) minmax(.5rem, 1fr);
  margin-bottom: 3rem;

  figure {
    grid-column: 1 / 4;
    margin-bottom: 2rem;

    &:last-child {
      margin-bottom: 0;
    }

    img {
      width: 100%;
    }
  }

  h3, p {
    grid-column: 2 / 3;
  }

  h3 {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  figcaption {
    padding-left: 0;
    padding-right: 0;
  }
}


//////////////////////////////////////////////////

@mixin side-by-side-figures($column-gap: 0, $rows: 2) {

  // A little utility to place two figures side by side in a grid, and have a (manual) caption spread underneath.
  // If we have more than to opictures (e.g. two rows of two pictures and one row of caption), increase $rows to add more explicit rows so the explicit placement of the caption works.

  display: grid;
  grid-template-columns: 1fr 1fr;
  column-gap: $column-gap;
  grid-template-rows: repeat($rows, min-content);

  p.caption {
    grid-column: 1/3;
    grid-row: -2/-1;
    margin-top: .2rem;
    margin-bottom: 1rem;
  }
}

//////////////////////////////////////////////////

.post-default-text, .post-default-project {
    padding: .5em;

    .post-image {
        width: 100%;
        max-width: $breakpoint-large;
        margin: auto;
        display:block;
    }

    header {
        text-align: center;
    }

    .entry-content > div {
      display: grid;
      grid-template-columns: minmax(1em, 1fr)
       minmax(0, 65ch) minmax(1em, 1fr);

      & > * {
        grid-column: 2 / 3;
      }

      .full-width, section {
        grid-column: 1 / 4;
      }

      & > section {
        display: grid;
        grid-template-columns: minmax(0, 1fr)
         minmax(0, 65ch) minmax(0, 1fr);

         & > * {
           grid-column: 2 / 3;
         }

         .full-width {
           grid-column: 1 / 4;
           margin: auto;
         }
      }

    }

    @media screen and (max-width: $breakpoint-medium) {
      figure, {
          margin-left: -.5em;
          margin-right: -.5em;
      }
    }
}

header {
  margin-bottom: 3rem;
}

.highlights {
  max-width: 65ch;
  margin: auto;
  padding-left: .5rem;
  padding-right: .5rem;
}


// Attribution lines in blockquotes should be flushed right

.attribution {
    text-align: right;
}


// Objects, videos need to be constrained to their parent.

object, video {
    max-width: 100%;
}

svg {
    // TODO: avoid cropping; https://css-tricks.com/scale-svg/
}

// Footnotes

.footnote {
  display: grid;
  grid-template-columns: min-content 1fr;
  grid-column-gap: .5rem;

  .label {
    grid-column: 1/2;
  }

  > p {
    grid-column: 2/3;
  }
}


// Experiments with the golden ratio as basis for all layouts ///////////////////////////////////

$phi: (1 + math.sqrt(5)) / 2;
$golden1: 1 / $phi;
$golden2: 1 / ( math.pow($phi, 2) );
// $golden3: 1 / ( math.pow($phi, 3) );
// $golden4: 1 / ( math.pow($phi, 4) );
$main-content-max-width: 65ch;

%golden-grid {
  display: grid;
  grid-template-columns:

    // The left margin (larger) is in a golden relationship with the right margin (smaller) to visually balance the opposite golden relationship of the content zones:
    [full-start] minmax(1rem, #{$golden1}fr)

    // The main content is limited by its max width, and we split that zone into 4 columns for flexibility:
    [full-content-start main-content-start] repeat(4, minmax(min-content, #{$main-content-max-width / 4}))

    // We don't have a column-gap in order to stay as close as possible to the golden proportions, so we add a gutter here to separate the two content sections a bit:
    [main-content-end] calc(1.2rem + 2vw) // slightly larger than $base-unit

    // The side content is defined by its golden relationship to the main content, and we split that zone into 3 columns for flexibility:
    [side-content-start] repeat(3, minmax(min-content, #{$golden1 * $main-content-max-width / 3}))

    // The right margin (smaller) is in a golden relationship with the left margin (larger):
    [side-content-end full-content-end] minmax(1rem, #{$golden2}fr)
    [full-end];

  // On small viewports, everything is stacked vertically:

  > * {
    grid-column: full-content;
  }

  // On small viewports, images in figures are stretched to the full viewport, but for that we need to flatten them so we can align its child elements on the grid. The figcaption keeps its margins though.

  figure,
  .figures {
    display: contents;
  }

  img {
    grid-column: full;
  }

  figcaption,
  .caption {
    grid-column: full-content;
  }

  // On larger viewports, we switch to our golden grid:

  @media screen and (min-width: $breakpoint-medium) {
    h3,
    p,
    // Let's put figures in the main-content unless explicitly in a sidebar. We keep <figure> and .figures elements flattened so we can arrange images and captions Ã  la Tufte:
    img,
    //.expert content tends to be wordy and among figures so let's keep it in the main-content zone by default:
    .expert,
    // Override class to place elements that are traditionally in side-content in the main-content. We put it inside the golden-grid definition for specificity reasons.
    // (We don't need the reverse class because we can use the sidebar directive for that.)
    .main-content {
      grid-column: main-content;
    }

    // Unless we have a full-content element:
    .full-content {
      grid-column: full-content;
    }

    // Place side elements in the sidebar:
    .footnote,
    .sidebar,
    figcaption,
    .caption {
      grid-column: side-content;
    }

    // Align <figcaption> and .caption elements at the start for a Tufter look:
    figcaption,
    .caption {
      align-self: start;
    }

    // Align other elements in the sidebar vertically for a more dynamic / organic flow:
    .footnote,
    .sidebar {
      align-self: center;

      // Unless we specifically don't want to
      &.align-start {
        align-self: start;
      }

      &.align-end {
        align-self: end;
      }
    }
  }
}




// Create classes for indicating on which row images should start in the golden grid

@for $i from 1 through 10 {
  .rowstart-#{$i} {
    @media screen and (min-width: $breakpoint-medium) {
      grid-row-start: #{$i};
    }
  }
}

// Create classes for spanning images across several rows in the golden grid

@for $i from 1 through 10 {
  .rowspan-#{$i} {
    @media screen and (min-width: $breakpoint-medium) {
      grid-row-end: span #{$i};
    }
  }
}
