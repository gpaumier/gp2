@use '../settings' as *;
@use '../common/typography';

$breakpoint: 100ch;
$column-width: 80ch;

// Mixins

//////////////////////////////////////////////////

%new4split {
  //  Default split layout
  display: grid;
  grid-template-columns: repeat(2, minmax(min-content, 1fr));
  column-gap: calc(1.2rem + 2vw); // slightly larger than $base-unit
  margin: auto;

  // by default we stack everything as if there was no split (mobile default)
  > * {
    grid-column: 1/3;
  }
}

%split {

  //  Default split layout
  $width: 65ch;

  display: grid;
  grid-template-columns:
  minmax(.5rem, 1fr)
  minmax(min-content, $width)
  1.5rem
  minmax(min-content, $width)
  minmax(.5rem, 1fr);
  column-gap: $base-unit;
  margin-bottom: 3rem;

  &:last-child {
    margin-bottom: 0;
  }

  // Full-width images in small viewports

  > figure,
  .figures {
    grid-column: 1 / 6;
    margin-bottom: 2rem;

    &:last-child {
      margin-bottom: 0;
    }

    figcaption {
      // The figure spans all 6 columns so the img can reach the edges of the viewport, but the caption isn't a child element of the grid so we can't confine it to columns 2-5, so we need to re-add the side margins here
      margin-left: .5rem;
      margin-right: .5rem;
      // remove bottom margin here since we added it to the parent element
      margin-bottom: 0;
    }
  }

  h3,
  h4,
  p,
  dl,
  aside,
  .expert {
    grid-column: 2 / 5;
  }

  .footnote p {
    // add this here because specificity of p otherwise overrides the footnotes
    grid-column: 2/3;
  }

  h3 {
    margin-bottom: 1.5rem;
    text-align: center;
  }

}

//////////////////////////////////////////////////

@mixin new4columns($left-width: 65ch, $right-width: 65ch) {

  // to be used in conjunction with @extend %split
  // if we want customizable widths

  grid-template-columns:
  minmax(min-content, $left-width)
  minmax(min-content, $right-width)
}

@mixin split($left-width: 65ch, $right-width: 65ch) {

  // same as above but with customizable widths
  @extend %split;

  grid-template-columns:
  minmax(.5rem, 1fr)
  minmax(min-content, $left-width)
  1.5rem
  minmax(min-content, $right-width)
  minmax(.5rem, 1fr);
}

//////////////////////////////////////////////////

%new4text-pics { // formerly $image-side: "right"

  // Rules for splitting content into a text column and a pics column. To be embedded in a split layout, not for direct use.

  @media screen and (min-width: $breakpoint) {
    > figure,
    .figures {
      grid-column: 2/3;
    }

    h3,
    h4,
    p,
    dl,
    .footnote,
    .expert {
      grid-column: 1/2;
      // .expert is here since by default it's going in the main column.
      // To override, use the split.new4place() mixin, but make sure the rule is specific enough to override this one
    }

    .footnote p {
      // add this here because specificity of p otherwise overrides the footnotes
      grid-column: 2/3;
    }
  }
}


%new4pics-text { // formerly: text-pics(left)

  // Same but flipped

  @media screen and (min-width: $breakpoint) {
    > figure,
    .figures {
      grid-column: 1/2;
    }

    h3,
    h4,
    p,
    dl,
    .footnote,
    .expert {
      grid-column: 2/3;
    }

    .footnote p {
      grid-column: 2/3;
    }
  }
}

// Mixins for partial layouts in a split context
// Used to build more specialized split layouts

@mixin txt-pics-columns-in-split($image-side, $image-row-span, $pics-width: 65ch, $text-width: 65ch, $image-row-start: 1) {

  // Rules for splitting content into a text column and a pics column. To be embedded in a split layout, not for direct use. Made as a mixin so it can be included in both regular and with-cover split layouts.

  @media screen and (min-width: $breakpoint) {
    > figure,
    .figures {
      grid-column: if($image-side == "left", #{2/3}, #{-2/-3});
      grid-row: #{$image-row-start} / #{$image-row-span + $image-row-start};

      figcaption, .caption {
        // Remove the margins when we're no longer in full-width picture
        margin-left: 0;
        margin-right: 0;
      }
    }

    h3,
    h4,
    p,
    dl,
    .footnote,
    .expert {
      grid-column: if($image-side == "left", #{4/5}, #{-4/-5});
      // .expert is here since by default it's going in the main column.
      // To override, use the place-split-layout-element mixin, but make sure the rule is specific enough to override this one
    }

    .footnote p {
      // add this here because specificity of p otherwise overrides the footnotes
      grid-column: 2/3;
    }
  }

}

%hero-in-split {
  // this used to be a mixin where creating different styles whether the hero image was // dark or light. Now we assume it's dark (which enables us to simply extend this style verbatim) and simply make tiny adjustments if it's light.
  grid-template-rows:
  minmax(.5rem, 2vh)
  35vh
  35vh
  minmax(.5rem, 2vh)
  2rem
  auto;

  h2 {
    grid-column: 2/5;
    grid-row: 2/4;
    align-self: center;
    z-index: 50;
    color: #f3f3f3;
  }

  > figure:first-of-type {

    // This is the first picture in the section, i.e. the one we want to use as graphic spread.

    grid-column: 1/6;
    grid-row: 1/5;
    z-index: 25;

    img {
      height: 100%;
      object-fit: cover;
      // If we have a dark background with bright text, make the background darker by reducing brightness
      filter: brightness(60%);
    }

    figcaption {
      // The figure spans all 6 columns so the img can reach the edges of the viewport, but the caption isn't a child element of the grid so we can't confine it to columns 2-5, so we need to re-add the side margins here
      margin-left: .5rem;
      margin-right: .5rem;
    }

  }

  &:after {

    // Reserve the fifth row with an invisible character (immediately underneath the graphic spread) to leave space for the caption and to bump the paragraph text to the next available row.

    content: ' ';
    grid-column: 1/6;
    grid-row: 5/6;
  }

  @media screen and (min-width: $breakpoint) {

    h2 {
      grid-column: 2/5;
      grid-row: 2/3;
      align-self: end;
    }

    > p:first-of-type {
      grid-column: 2/5;
      grid-row: 3/4;
      align-self: center;
      z-index: 50;
      @include typography.larger-font-size();
      color: #f3f3f3;
    }

  }
}



//////////////////////////////////////////////////

@mixin txt-pics($image-side: right, $image-row-span: 2, $pics-width: 65ch, $text-width: 65ch) {

  // A split layout with text in one column and images in the other

  @if $image-side == "left" {
    @include split($pics-width, $text-width)
  } @else {
    @include split($text-width, $pics-width)
  };

  @include txt-pics-columns-in-split($image-side, $image-row-span);

}

//////////////////////////////////////////////////


%new4hero-section {

  // A graphic spread for h2 title and one-liner <p>.

  // this used to be a mixin where creating different styles whether the hero image was // dark or light. Now we assume it's dark (which enables us to simply extend this style verbatim) and simply make tiny adjustments if it's light.

  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows:
  35vh
  35vh
  3rem
  auto;

  > * {
    grid-column: 1/2;
  }

  // on narrow viewports, only the h2 title is in the graphic spread, so we center it.

  h2 {
    grid-row: 1/3;
    align-self: center;
    z-index: 50;
    color: #f3f3f3;
    @extend %hero-h2 !optional;
  }

  > figure:first-of-type {

    // This is the first picture in the section, i.e. the one we want to use as graphic spread.

    grid-row: 1/3;
    z-index: 25;
    margin: 0;

    img {
      height: 100%;
      object-fit: cover;
      margin: 0;
      // If we have a dark background with bright text, make the background darker by reducing brightness
      filter: brightness(60%);
    }
  }

  &:after {

    // Reserve the fifth row with an invisible character (immediately underneath the graphic spread) to leave space for the caption and to bump the paragraph text to the next available row.

    content: ' ';
    grid-column: 1/3;
    grid-row: 3/4;
  }

  @media screen and (min-width: $breakpoint) {

    // on larger viewports, we pull up the h2 title to make space for the first paragraph that's also pulled into the graphic spread.

    h2 {
      grid-row: 1/2;
      align-self: end;
    }

    > p:first-of-type {
      grid-row: 2/3;
      align-self: center;
      z-index: 50;
      @include typography.larger-font-size();
      color: #f3f3f3;
      padding-left: $base-unit;
      padding-right: $base-unit;
      margin: auto;
      max-width: $column-width;
    }

    figcaption {
      // The figure spans both columns so the img can reach the edges of the viewport, but the caption should have some margins
      padding-left: $base-unit;
      padding-right: $base-unit;
    }
  }
}

@mixin hero-darken($brightness: 35%) {
  // make the hero image a little darker to ensure legibility

  > figure:first-of-type img{
    filter: brightness($brightness);
  }
}

%new4hero-section-with-split-layout {

  // Like %new4hero-section but with a split layout for the rest of the section after the graphic spread. For use when we want a split layout for a section that only has a h2 title and paragraphs with no h3s.

  @extend %new4split;
  @extend %new4hero-section;

  > * {
    grid-column: 1/3;
  }
}


%split-hero {

  // Like split-layout but with a graphic spread first for h2 title and one-liner <p>.

  @extend %split;
  @extend %hero-in-split;

  > * {
    @extend %spread;
  }
}

//////////////////////////////////////////////////


@mixin txt-pics-hero($image-side: right, $image-row-span:4, $background: dark, $text-width: 65ch, $pics-width: 65ch) {

  // A split-layout with both a hero section-title and text/pics columns

  @if $image-side == "left" {
    @include split($pics-width, $text-width)
  } @else {
    @include split($text-width, $pics-width)
  };

  @extend %split-hero;
  @include txt-pics-columns-in-split($image-side, $image-row-span, $image-row-start: 6);

}

//////////////////////////////////////////////////


@mixin cover($image-side, $image-row-span, $image-position) {

  // Like split-layout but here the image has an object-fit: cover

  @include txt-pics(
  $image-side,
  $image-row-span,
  $pics-width: 65ch,
  $text-width: 65ch,
  );

  figure {

    height: 50vh;

    img {
      height: 100%;
      object-fit: cover;
      object-position: $image-position;
    }
  }

  @media screen and (min-width: $breakpoint) {
    figure {
      height: 100%;
    }

    p:last-child,
    dl:last-child { // for proper alignment with bottom of image
      margin-bottom: 0;
    }
  }

}

//////////////////////////////////////////////////

// Mixins to place elements in a split layout


@mixin new4place($side, $grid-row: "auto") {

  // A utility to place split-layout figures in their proper row and columns if the built-in rules aren't enough.

  grid-column: 1/3;

  @media screen and (min-width: $breakpoint) {
    grid-column: if($side == "left", #{1/2}, #{-1/-2});
    grid-row: #{$grid-row};
  }

}

@mixin place($side, $grid-row: "auto") {

  // A utility to place split-layout figures in their proper row and columns if the built-in rules aren't enough.

  grid-column: 1/6;

  @media screen and (min-width: $breakpoint) {
    grid-column: if($side == "left", #{2/3}, #{-2/-3});
    grid-row: #{$grid-row};
  }

}

%new4spread {
  // A utility to spread split-layout figures across both columns of a split layout.
  grid-column: 1/3;
  grid-row: auto;
}


%spread {
  // A utility to spread split-layout figures across both columns of a split layout.
  grid-column: 1/6;

  @media screen and (min-width: $breakpoint) {
    grid-column: 2/5;
    grid-row: auto;
  }
}

@mixin new4spread($grid-row: auto) {
  // Same as above but configurable
  grid-column: 1/3;
  grid-row: #{$grid-row};
}

@mixin spread($grid-row: auto) {
  // Same as above but configurable
  grid-column: 1/6;

  @media screen and (min-width: $breakpoint) {
    grid-column: 2/5;
    grid-row: #{$grid-row};
  }

}

/////////////////////////////////////////////////////////////

// Adjustments from defaults:
// Keep at the end so they override the defaults above when they're extended elsewhere

%hero-in-split-light {
  // adjustments where the hero image is light

  h2 {
    color: #222;
  }

  > figure:first-of-type img {
    // If we have a light background with dark text, make the background brighter by increasing transparency.
    filter: opacity(20%);
  }

  @media screen and (min-width: $breakpoint) {
    > p:first-of-type {
      color: #222;
    }
  }
}
